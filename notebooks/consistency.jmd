
# Data checking: consistency

A common task in data cleaning or data checking is to establish consistency in columns of values that should be a property of another column of keys.
Suppose, for example, that a longitudinal data set collected on several `subject`s over time also contains a column for the subject's `gender`.
We should check that the gender is recorded consistently for each subject.
(Inconsistently recorded gender may be a choice by a non-binary person but most of the time it is a data error.)

We will use data from the [ManyBabies study](https://github.com/manybabies/mb1-analysis-public/) to illustrate such checks.
This is a valuable data set because the investigators in the study documented the original data and the steps in cleaning it.

First load the packages to be used.

```julia
using Arrow, CSV, DataFrames, HTTP, Tables
```

The data table we will consider is `processed_data/02_validated_output.csv`.
It can be read directly from github with

```julia
f = CSV.File(
    HTTP.get("https://github.com/manybabies/mb1-analysis-public/raw/master/processed_data/02_validated_output.csv").body,
    missingstrings = ["NA"],
	truestrings = ["TRUE"],
	falsestrings = ["FALSE"],
);
```

## Data Tables

The packages developed by the [JuliaData group](https://github.com/JuliaData/) provide both column-oriented tables, similar to `data.frame` or `tibble` in `R` or `pandas` data frame in `Python`, or row-oriented tables, such as returned from queries to relational database systems.
The [Tables package](https://github.com/JuliaData/Tables.jl) provides the glue between the two representations.

The value returned by `CSV.File` iterates efficient row "views", but stores the data internally in columns.

```julia
length(f)
```

```julia
schem = Tables.schema(f)
```

`f` can be converted to a generic column-oriented table with `Tables.columntable`

```julia
ct = Tables.columntable(f)
```

```julia
typeof(ct)
```
which is a `NamedTuple`, somewhat like a `list` in `R`.
This is an immutable structure in the sense that the names and the locations of the vectors representing the columns cannot be changed.
The values in the vectors can be modified but the structure can't.

A `DataFrame`, provided by the [DataFrames package](https://github.com/JuliaData/DataFrames.jl), is mutable.  The package provides facilities comparable to the tidyverse or pandas.
For example, we use a GroupedDataFrame below to access rows containing a specific `subid`.
```julia
df = DataFrame(ct);
describe(df)
```

## Checking for inconsistent values

The general approach in pandas or tidyverse is to manipulate columns.
In Julia we can choose either row-oriented or column-oriented because the `Tables` interface incorporates both.

One assumption about these data was that the `subid` was unique to each baby.
It turns out that was not the case, which is why the `subid_unique` was created.
Different `lab`s used the same `subid` forms.

To check for unique values in a `value` column according to a `key` column we can iterate over the vectors and store the first value associated with each key in a dictionary.
For each row if a value is stored and it is different from the current value the key is included in the set of inconsistent keys.
(A `Set` is used rather than a `Vector` to avoid recording the same key multiple times.)

A method defined for two vectors could be

```julia
function inconsistent(keycol, valuecol)
	dict = Dict{eltype(keycol), eltype(valuecol)}()
	set = Set{eltype(keycol)}()
	for (k,v) in zip(keycol, valuecol)
		if haskey(dict, k) && dict[k] ≠ v
			push!(set, k)
		else
			dict[k] = v
		end
	end
	set
end
inconsistent(df.subid, df.lab)
```

A row-oriented approach would simply iterate over the rows

```julia
let dict = Dict()
	set = Set()
	for r in Tables.rows(f)
		get!(dict, r.subid, r.lab) ≠ r.lab && push!(set, r.subid)
	end
	set
end
```

Note that the returned value is a `Set{Any}` as we did not specify an element type in the constructor.

This code chunk uses the `get!` method for a `Dict`, which combines the effect of `haskey`, `setindex` and `getindex`. It also uses the short-circuiting boolean AND, `&&`.

The same effect can be achieved by the "lazy" evaluator `Tables.columns` which creates the effect of having columns as vectors.

```julia
function inconsistent(tbl, keysym::Symbol, valuesym::Symbol)
	ctbl = Tables.columns(tbl)
	inconsistent(getproperty(ctbl, keysym), getproperty(ctbl, valuesym))
end
inconsistent(f, :subid, :lab)
```

Finally we can go back and rewrite a more specific method for vectors using templated types.

```julia
function inconsistent(kvec::AbstractVector{T}, vvec::AbstractVector{S}) where {T,S}
	dict = Dict{T,S}()
	set = Set{T}()
	for (k, v) in zip(kvec, vvec)
		get!(dict, k, v) ≠ v && push!(set, k)
	end
	set
end

dupids = inconsistent(ct.subid, ct.lab)
```

or, passing the Table and column names,

```julia
inconsistent(f, :subid, :lab)
```

Unfortunately, we are not quite finished.
As frequently happens in data science, missing data values will complicate things.

For example, some of the values in the `preterm` column are missing.

```julia
unique(f.preterm)
```

and if we try to check for consistency these values cause an error

```julia
inconsistent(f, :subid, :preterm)
```

The problem stems from comparison with values that may be missing.
Most comparisons will, necessarily, return missing.
The only function guaranteed to return a logical value for an argument of `missing` is `ismissing`.

We could add code to check for missing values and take appropriate action but another approach shown below allows us to side-step this problem.

## Using DataFrames to check consistency

If I were just checking for consistency in R I would `select` the key and value columns, find the `unique` rows and check the number of rows against the number of keys.  The same approach could be used with the `DataFrames` package.

```julia
nrow(unique(select(df, [:lab, :subid])))
```

```julia
select(df, [:lab, :subid]) |> unique |> nrow # if you feel you must use pipes
```

```julia
length(unique(df.subid))
```

This brings up a couple of "variations on a theme" for the Julia version.  Suppose we just wanted to check if the values are consistent with the keys.  Then we can short-circuit the loop.

```julia
function isconsistent(kvec::AbstractVector{T}, vvec::AbstractVector{S}) where {T,S}
	dict = Dict{T,S}()
	for (k, v) in zip(kvec, vvec)
		get!(dict, k, v) ≠ v && return false
	end
	true
end
isconsistent(ct.subid, ct.lab)
```

Alternatively, suppose we wanted to find all the `lab`s that used a particular `subid`.

```julia
function allvals(kvec::AbstractVector{T}, vvec::AbstractVector{S}) where {T,S}
	dict = Dict{T,Set{S}}()
	for (k, v) in zip(kvec, vvec)
		push!(get!(dict, k, Set{S}()), v)
	end
	dict
end
setslab = allvals(ct.subid, ct.lab)
```

This allows us to get around the problem of missing values in the `preterm` column.

```julia
setspreterm = allvals(f.subid_unique, f.preterm)
```

```julia
repeatedlab = filter(pr -> length(last(pr)) > 1, setslab)
```

The construction using `->` (sometimes called a "stabby lambda") creates an anonymous function.
The argument to this function will be a `(key, value)` pair and `last(pr)` extracts the value, a `Set{String}` in this case.

`preterm`, on the other hand, is coded consistently for each `subid_unique`.

```julia
repeatedpreterm = filter(pr -> length(last(pr)) > 1, setspreterm)
```

## Extracting the inconsistent cases

The `DataFrames` package provides a `groupby` function to create a `GroupedDataFrame`.
Generally it is use in a split-apply-combine strategy but it can be used to extract subsets of rows according to the values in one or more columns.
It is effective if the operation is to be repeated for different values, such as here.

```julia
gdf = groupby(df, :subid);
typeof(gdf)
```

```julia
g1 = gdf[(subid = "1",)]
```

```julia
unique(g1.lab)
```

## Summary

The point of this example is not that one should expect to custom program each step in a data cleaning operation.
The facilities in the `DataFrames` package could be used in a tidyverse-like approach.

However, if the particular tool for a task is not available or, more likely, you don't know offhand where it is and what it is called, there are low-level tools easily available.
And using the low-level tools inside of loops doesn't impede performance.

As a last action in this notebook, we will save the table as an `Arrow` file that will be used in the next notebook.

Arrow files can be written with or without compression.
As may be expected, the file size of the compressed version is smaller but it takes longer to read it because it must be uncompressed.

```julia
Arrow.write("02_validated_output.arrow", f);
```

```julia
filesize("02_validated_output.arrow")
```

```julia
Arrow.write("02_validated_output_compressed.arrow", f, compress = :zstd)
```

```julia
filesize("02_validated_output_compressed.arrow")
```
